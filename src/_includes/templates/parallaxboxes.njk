<!-- parallaxboxes.njk -->
<div id="parallaxboxes" class="interior-parallax pbr-120 color-dark">
  <div class="boxparallax1">
    <div class="boxparallax1-content">
      <img width="100%" src="/assets/static/images/phone-6.png" alt="parallax1">
    </div>
  </div>
  <div class="boxparallax2">
    <div class="boxparallax2-content">
      <img width="100%" src="/assets/static/images/phone-7.png" alt="parallax2">
    </div>
  </div>
  <div class="boxparallax3">
    <div class="boxparallax3-content">
      <img width="100%" src="/assets/static/images/phone-8.png" alt="parallax3">
    </div>
  </div>
</div>
<div id="textAppear2" class="container-3 pbr-120 color-dark">



  <div class="container  inview ">
    <div class="row mb-16">
      <div class="col-xs-12 text-center">
        <div class="fade-opacity">
          <svg width="50" height="47" viewBox="0 0 50 47" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M42.5356 1.69821C38.5688 -0.581819 33.6056 -0.564887 29.5829 1.74252C28.1417 2.56929 27.6471 4.40196 28.4779 5.83578C29.3091 7.26981 31.1514 7.76169 32.5922 6.93514C34.7896 5.67461 37.3804 5.65684 39.5217 6.88789C42.1408 8.39342 43.5832 11.4212 43.5832 15.4135C43.5832 19.9303 41.3858 27.5754 30.9178 38.3479C27.5414 41.8226 21.9346 41.9065 18.4193 38.5361C12.9438 33.2862 6.41674 25.223 6.41674 16.6249V14.8656C6.41674 12.619 8.28385 10.7911 10.5788 10.7911C12.8737 10.7911 14.7408 12.619 14.7408 14.8656V21.6191C14.7408 27.247 19.343 31.8256 25 31.8256C26.727 31.8256 28.356 31.3985 29.7856 30.6456C30.3311 31.4132 31.23 31.914 32.2468 31.914C33.9105 31.914 35.259 30.5724 35.259 28.9172V15.6108C35.259 13.9558 33.9105 12.614 32.2468 12.614C30.583 12.614 29.2345 13.9558 29.2345 15.6108V21.6191C29.2345 23.942 27.3348 25.8319 25 25.8319C22.665 25.8319 20.7653 23.942 20.7653 21.6191V14.8656C20.7653 9.31404 16.1956 4.79747 10.5788 4.79747C4.96189 4.79747 0.392242 9.31404 0.392242 14.8656V17.7044C0.392242 17.9203 0.416301 18.1306 0.460005 18.3336C1.19994 28.3327 8.26053 37.1198 14.2388 42.852C17.1279 45.622 20.86 47 24.5844 47C28.4705 46.9998 32.348 45.4993 35.2491 42.5139C41.7996 35.773 49.6078 25.5997 49.6078 15.4135C49.6078 9.28059 47.03 4.28155 42.5356 1.69821Z" fill="#FC4F4F"/>
            </svg>
            
    
        </div>
      </div>
    </div>
  </div>


  <div class="row">
    <div class="col-xs-12 inview text-center height-lg">



      <div class="fluid-4-b js-appearText2">Conectando generaciones </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('scroll', () => {
    const parallaxSection = document.getElementById('parallaxboxes');
    if (!parallaxSection) return;
    const rect = parallaxSection.getBoundingClientRect();
    if (rect.top >= window.innerHeight || rect.bottom < 0) return;
    const parallaxBoxes = document.querySelectorAll('#parallaxboxes > div');
    const scrollPosition = 150;
    parallaxBoxes.forEach((box, index) => {
      const speed = 0.2; // Reducir la velocidad del efecto parallax
      const offset = (rect.top - scrollPosition) * speed * (index + 1);
      box.style.transform = `translateY(${offset}px)`;
    });
  });
</script>
<script type="module">
  // Registrar el plugin
  gsap.registerPlugin(SplitText);
  export function initAppearText() {
    const targets = document.querySelectorAll('.js-appearText2');
    if (!targets.length) return;
    targets.forEach(el => {
      // 1. Separar palabras
      const split = new SplitText(el, { type: 'words' });
      // 2. Crear timeline (pausado)
      const tl = gsap.timeline({ paused: true })
        .from(split.words, {
          duration: 0.6,
          opacity: 0.1,
          ease: 'power2.out',
          stagger: 0.2
        });
      // 3. Medidas de la sección
      const section = document.getElementById('textAppear2') || document.body;
      const sectionHeight = section.offsetHeight;
      const update = () => {
        const rect = section.getBoundingClientRect();
        const visible = window.innerHeight - rect.top;
        const progress = Math.min(1, Math.max(0, (visible - window.innerHeight * 0.2) / sectionHeight));
        tl.progress(progress);
      };
      // 4. Sincronizar con Lenis o scroll nativo
      if (window.lenis && typeof window.lenis.on === 'function') {
        window.lenis.on('scroll', update);
      } else {
        window.addEventListener('scroll', update, { passive: true });
      }
      // Ejecutar al inicio por si ya está en vista
      update();
    });
  }
  // Bootstrap: crear Lenis si no existe
  document.addEventListener('DOMContentLoaded', () => {
    if (!window.lenis) {
      window.lenis = new Lenis({
        smooth: true,
        lerp: 0.1
      });
      const raf = time => {
        window.lenis.raf(time);
        requestAnimationFrame(raf);
      };
      requestAnimationFrame(raf);
    }
    initAppearText();
  });
</script>